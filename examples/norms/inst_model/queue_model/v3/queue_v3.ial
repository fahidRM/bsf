%%% institution queue 
institution queue;

%%% component 
type Agent;
type Position;
type Type; 

%%% creation event
create event createQueue;

%%% exogenous event
exogenous event newArrival(Agent);     % agent arrives 
exogenous event move(Agent,Position);   % Agent moves to Position . 

exogenous event queueLast(Agent);   % event for agent to join the end of queue
exogenous event yield(Agent);      % event for agent to yield 
exogenous event deadline; 

%%% institutional events
inst event iniMove(Agent,Position);       % Agent moves to Position. 
inst event iniMoved(Agent,Position);      % Agent ALREADY moved to Position. 
inst event iniOblQueueLast(Agent) ;     % inst-event for agent join the end
inst event iniOblYield;         % inst-event for agent to yield 

%%% violation event
violation event vioQueue(Agent); 
violation event vioYield(Agent); 

%%% fluents
fluent inQueue(Agent,Position);     % Agent is at position Position in the queue . 
fluent endOfQueue(Position);	    % Position is the end of current queue. 
fluent agentType(Agent,Type);       % Agent's type is Type. 

%fluent next(Time, Time);

%%% rule 1: if new arrived agent is normal, then it becomes the new end of queue and update the corresponding fluents with the agent and queue. 
newArrival(Agent) generates iniMove(Agent,Position) if agentType(Agent, normal), endOfQueue(Position);   
iniMove(Agent,P) initiates perm(move(Agent,P)); 

move(Agent, Position2) generates iniMoved(Agent,Position2);
iniMoved(Agent, Position2) terminates inQueue(Agent, Position1) if inQueue(Agent, Position1); 
iniMoved(Agent, Position2) initiates inQueue(Agent, Position2); 

%%% rule 2: exo-event newArrival generates relevant obligations for all agents (including new arrived agent and agents in the queue)
newArrival(Agent) generates iniOblQueueLast(Agent) ; 
iniOblQueueLast(Agent) initiates perm(queueLast(Agent)), obl(queueLast(Agent), deadline, vioQueue(Agent));   % by default, new arrival agent should queue to the last position. 

newArrival(Agent) generates iniOblYield if agentType(Agent, disable); % but if the new agent is disable, then obligation to yield is initiated for all agents in the queue.                 
iniOblYield initiates obl(yield(Agent), deadline, vioYield(Agent)) if inQueue(Agent, Position); % if agent is inQueue(), then obi(yield) is initiated for it.   
iniOblYield initiates perm(yield(Agent)) if inQueue(Agent, Position); 
				

%%% initial states : let's start with only one agent 1 at position p1 in the queue at time 1. 
initially inQueue(1,p1), agentType(1, normal);
initially inQueue(2,p2), agentType(2, normal);
initially endOfQueue(p3);  

%%% initiate permissions and empowerment  
initially pow(iniMove(Agent,Position)), pow(iniMoved(Agent,Position));
initially perm(iniMove(Agent,Position)), perm(iniMoved(Agent,Position));
initially perm(iniMove(Agent,Position)), perm(iniMoved(Agent,Position));
initially perm(deadline);
initially perm(iniOblQueueLast(Agent)), pow(iniOblQueueLast(Agent));
initially perm(iniOblYield), pow(iniOblYield);

%%% new agent 2 arrives at time 1, which is a normal agent.  
initially perm(newArrival(3)), agentType(3,disable);

